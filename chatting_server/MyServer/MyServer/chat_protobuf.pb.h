// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_protobuf.proto

#ifndef PROTOBUF_chat_5fprotobuf_2eproto__INCLUDED
#define PROTOBUF_chat_5fprotobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chat_server {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chat_5fprotobuf_2eproto();
void protobuf_InitDefaults_chat_5fprotobuf_2eproto();
void protobuf_AssignDesc_chat_5fprotobuf_2eproto();
void protobuf_ShutdownFile_chat_5fprotobuf_2eproto();

class packet_chat_normal;
class packet_chat_notice;
class packet_chat_room;
class packet_chat_whisper;
class packet_verify_user;

enum message_type {
  VERIFY = 0,
  NORMAL = 1,
  WHISPER = 2,
  ROOM = 3,
  NOTICE = 4
};
bool message_type_IsValid(int value);
const message_type message_type_MIN = VERIFY;
const message_type message_type_MAX = NOTICE;
const int message_type_ARRAYSIZE = message_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* message_type_descriptor();
inline const ::std::string& message_type_Name(message_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    message_type_descriptor(), value);
}
inline bool message_type_Parse(
    const ::std::string& name, message_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<message_type>(
    message_type_descriptor(), name, value);
}
// ===================================================================

class packet_verify_user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_server.packet_verify_user) */ {
 public:
  packet_verify_user();
  virtual ~packet_verify_user();

  packet_verify_user(const packet_verify_user& from);

  inline packet_verify_user& operator=(const packet_verify_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_verify_user& default_instance();

  static const packet_verify_user* internal_default_instance();

  void Swap(packet_verify_user* other);

  // implements Message ----------------------------------------------

  inline packet_verify_user* New() const { return New(NULL); }

  packet_verify_user* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_verify_user& from);
  void MergeFrom(const packet_verify_user& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_verify_user* other);
  void UnsafeMergeFrom(const packet_verify_user& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key_string = 1;
  bool has_key_string() const;
  void clear_key_string();
  static const int kKeyStringFieldNumber = 1;
  const ::std::string& key_string() const;
  void set_key_string(const ::std::string& value);
  void set_key_string(const char* value);
  void set_key_string(const char* value, size_t size);
  ::std::string* mutable_key_string();
  ::std::string* release_key_string();
  void set_allocated_key_string(::std::string* key_string);

  // required string value_user_id = 2;
  bool has_value_user_id() const;
  void clear_value_user_id();
  static const int kValueUserIdFieldNumber = 2;
  const ::std::string& value_user_id() const;
  void set_value_user_id(const ::std::string& value);
  void set_value_user_id(const char* value);
  void set_value_user_id(const char* value, size_t size);
  ::std::string* mutable_value_user_id();
  ::std::string* release_value_user_id();
  void set_allocated_value_user_id(::std::string* value_user_id);

  // @@protoc_insertion_point(class_scope:chat_server.packet_verify_user)
 private:
  inline void set_has_key_string();
  inline void clear_has_key_string();
  inline void set_has_value_user_id();
  inline void clear_has_value_user_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_string_;
  ::google::protobuf::internal::ArenaStringPtr value_user_id_;
  friend void  protobuf_InitDefaults_chat_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_chat_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_verify_user> packet_verify_user_default_instance_;

// -------------------------------------------------------------------

class packet_chat_normal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_server.packet_chat_normal) */ {
 public:
  packet_chat_normal();
  virtual ~packet_chat_normal();

  packet_chat_normal(const packet_chat_normal& from);

  inline packet_chat_normal& operator=(const packet_chat_normal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_chat_normal& default_instance();

  static const packet_chat_normal* internal_default_instance();

  void Swap(packet_chat_normal* other);

  // implements Message ----------------------------------------------

  inline packet_chat_normal* New() const { return New(NULL); }

  packet_chat_normal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_chat_normal& from);
  void MergeFrom(const packet_chat_normal& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_chat_normal* other);
  void UnsafeMergeFrom(const packet_chat_normal& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required string chat_message = 2;
  bool has_chat_message() const;
  void clear_chat_message();
  static const int kChatMessageFieldNumber = 2;
  const ::std::string& chat_message() const;
  void set_chat_message(const ::std::string& value);
  void set_chat_message(const char* value);
  void set_chat_message(const char* value, size_t size);
  ::std::string* mutable_chat_message();
  ::std::string* release_chat_message();
  void set_allocated_chat_message(::std::string* chat_message);

  // @@protoc_insertion_point(class_scope:chat_server.packet_chat_normal)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_chat_message();
  inline void clear_has_chat_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_message_;
  friend void  protobuf_InitDefaults_chat_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_chat_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_chat_normal> packet_chat_normal_default_instance_;

// -------------------------------------------------------------------

class packet_chat_whisper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_server.packet_chat_whisper) */ {
 public:
  packet_chat_whisper();
  virtual ~packet_chat_whisper();

  packet_chat_whisper(const packet_chat_whisper& from);

  inline packet_chat_whisper& operator=(const packet_chat_whisper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_chat_whisper& default_instance();

  static const packet_chat_whisper* internal_default_instance();

  void Swap(packet_chat_whisper* other);

  // implements Message ----------------------------------------------

  inline packet_chat_whisper* New() const { return New(NULL); }

  packet_chat_whisper* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_chat_whisper& from);
  void MergeFrom(const packet_chat_whisper& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_chat_whisper* other);
  void UnsafeMergeFrom(const packet_chat_whisper& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required string target_id = 2;
  bool has_target_id() const;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  const ::std::string& target_id() const;
  void set_target_id(const ::std::string& value);
  void set_target_id(const char* value);
  void set_target_id(const char* value, size_t size);
  ::std::string* mutable_target_id();
  ::std::string* release_target_id();
  void set_allocated_target_id(::std::string* target_id);

  // required string chat_message = 3;
  bool has_chat_message() const;
  void clear_chat_message();
  static const int kChatMessageFieldNumber = 3;
  const ::std::string& chat_message() const;
  void set_chat_message(const ::std::string& value);
  void set_chat_message(const char* value);
  void set_chat_message(const char* value, size_t size);
  ::std::string* mutable_chat_message();
  ::std::string* release_chat_message();
  void set_allocated_chat_message(::std::string* chat_message);

  // @@protoc_insertion_point(class_scope:chat_server.packet_chat_whisper)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_chat_message();
  inline void clear_has_chat_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr target_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_message_;
  friend void  protobuf_InitDefaults_chat_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_chat_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_chat_whisper> packet_chat_whisper_default_instance_;

// -------------------------------------------------------------------

class packet_chat_room : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_server.packet_chat_room) */ {
 public:
  packet_chat_room();
  virtual ~packet_chat_room();

  packet_chat_room(const packet_chat_room& from);

  inline packet_chat_room& operator=(const packet_chat_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_chat_room& default_instance();

  static const packet_chat_room* internal_default_instance();

  void Swap(packet_chat_room* other);

  // implements Message ----------------------------------------------

  inline packet_chat_room* New() const { return New(NULL); }

  packet_chat_room* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_chat_room& from);
  void MergeFrom(const packet_chat_room& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_chat_room* other);
  void UnsafeMergeFrom(const packet_chat_room& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required string chat_message = 2;
  bool has_chat_message() const;
  void clear_chat_message();
  static const int kChatMessageFieldNumber = 2;
  const ::std::string& chat_message() const;
  void set_chat_message(const ::std::string& value);
  void set_chat_message(const char* value);
  void set_chat_message(const char* value, size_t size);
  ::std::string* mutable_chat_message();
  ::std::string* release_chat_message();
  void set_allocated_chat_message(::std::string* chat_message);

  // @@protoc_insertion_point(class_scope:chat_server.packet_chat_room)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_chat_message();
  inline void clear_has_chat_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_message_;
  friend void  protobuf_InitDefaults_chat_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_chat_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_chat_room> packet_chat_room_default_instance_;

// -------------------------------------------------------------------

class packet_chat_notice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_server.packet_chat_notice) */ {
 public:
  packet_chat_notice();
  virtual ~packet_chat_notice();

  packet_chat_notice(const packet_chat_notice& from);

  inline packet_chat_notice& operator=(const packet_chat_notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_chat_notice& default_instance();

  static const packet_chat_notice* internal_default_instance();

  void Swap(packet_chat_notice* other);

  // implements Message ----------------------------------------------

  inline packet_chat_notice* New() const { return New(NULL); }

  packet_chat_notice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_chat_notice& from);
  void MergeFrom(const packet_chat_notice& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(packet_chat_notice* other);
  void UnsafeMergeFrom(const packet_chat_notice& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required string chat_message = 2;
  bool has_chat_message() const;
  void clear_chat_message();
  static const int kChatMessageFieldNumber = 2;
  const ::std::string& chat_message() const;
  void set_chat_message(const ::std::string& value);
  void set_chat_message(const char* value);
  void set_chat_message(const char* value, size_t size);
  ::std::string* mutable_chat_message();
  ::std::string* release_chat_message();
  void set_allocated_chat_message(::std::string* chat_message);

  // @@protoc_insertion_point(class_scope:chat_server.packet_chat_notice)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_chat_message();
  inline void clear_has_chat_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_message_;
  friend void  protobuf_InitDefaults_chat_5fprotobuf_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fprotobuf_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_chat_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<packet_chat_notice> packet_chat_notice_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// packet_verify_user

// required string key_string = 1;
inline bool packet_verify_user::has_key_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_verify_user::set_has_key_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_verify_user::clear_has_key_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_verify_user::clear_key_string() {
  key_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key_string();
}
inline const ::std::string& packet_verify_user::key_string() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_verify_user.key_string)
  return key_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_verify_user::set_key_string(const ::std::string& value) {
  set_has_key_string();
  key_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_verify_user.key_string)
}
inline void packet_verify_user::set_key_string(const char* value) {
  set_has_key_string();
  key_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_verify_user.key_string)
}
inline void packet_verify_user::set_key_string(const char* value, size_t size) {
  set_has_key_string();
  key_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_verify_user.key_string)
}
inline ::std::string* packet_verify_user::mutable_key_string() {
  set_has_key_string();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_verify_user.key_string)
  return key_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_verify_user::release_key_string() {
  // @@protoc_insertion_point(field_release:chat_server.packet_verify_user.key_string)
  clear_has_key_string();
  return key_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_verify_user::set_allocated_key_string(::std::string* key_string) {
  if (key_string != NULL) {
    set_has_key_string();
  } else {
    clear_has_key_string();
  }
  key_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_string);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_verify_user.key_string)
}

// required string value_user_id = 2;
inline bool packet_verify_user::has_value_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_verify_user::set_has_value_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_verify_user::clear_has_value_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_verify_user::clear_value_user_id() {
  value_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_user_id();
}
inline const ::std::string& packet_verify_user::value_user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_verify_user.value_user_id)
  return value_user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_verify_user::set_value_user_id(const ::std::string& value) {
  set_has_value_user_id();
  value_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_verify_user.value_user_id)
}
inline void packet_verify_user::set_value_user_id(const char* value) {
  set_has_value_user_id();
  value_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_verify_user.value_user_id)
}
inline void packet_verify_user::set_value_user_id(const char* value, size_t size) {
  set_has_value_user_id();
  value_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_verify_user.value_user_id)
}
inline ::std::string* packet_verify_user::mutable_value_user_id() {
  set_has_value_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_verify_user.value_user_id)
  return value_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_verify_user::release_value_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_verify_user.value_user_id)
  clear_has_value_user_id();
  return value_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_verify_user::set_allocated_value_user_id(::std::string* value_user_id) {
  if (value_user_id != NULL) {
    set_has_value_user_id();
  } else {
    clear_has_value_user_id();
  }
  value_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_verify_user.value_user_id)
}

inline const packet_verify_user* packet_verify_user::internal_default_instance() {
  return &packet_verify_user_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_chat_normal

// required string user_id = 1;
inline bool packet_chat_normal::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_chat_normal::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_chat_normal::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_chat_normal::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& packet_chat_normal::user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_normal.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_normal::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_normal.user_id)
}
inline void packet_chat_normal::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_normal.user_id)
}
inline void packet_chat_normal::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_normal.user_id)
}
inline ::std::string* packet_chat_normal::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_normal.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_chat_normal::release_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_normal.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_normal::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_normal.user_id)
}

// required string chat_message = 2;
inline bool packet_chat_normal::has_chat_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_chat_normal::set_has_chat_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_chat_normal::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_chat_normal::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_message();
}
inline const ::std::string& packet_chat_normal::chat_message() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_normal.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_normal::set_chat_message(const ::std::string& value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_normal.chat_message)
}
inline void packet_chat_normal::set_chat_message(const char* value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_normal.chat_message)
}
inline void packet_chat_normal::set_chat_message(const char* value, size_t size) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_normal.chat_message)
}
inline ::std::string* packet_chat_normal::mutable_chat_message() {
  set_has_chat_message();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_normal.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_chat_normal::release_chat_message() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_normal.chat_message)
  clear_has_chat_message();
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_normal::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    set_has_chat_message();
  } else {
    clear_has_chat_message();
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_normal.chat_message)
}

inline const packet_chat_normal* packet_chat_normal::internal_default_instance() {
  return &packet_chat_normal_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_chat_whisper

// required string user_id = 1;
inline bool packet_chat_whisper::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_chat_whisper::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_chat_whisper::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_chat_whisper::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& packet_chat_whisper::user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_whisper.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_whisper::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_whisper.user_id)
}
inline void packet_chat_whisper::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_whisper.user_id)
}
inline void packet_chat_whisper::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_whisper.user_id)
}
inline ::std::string* packet_chat_whisper::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_whisper.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_chat_whisper::release_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_whisper.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_whisper::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_whisper.user_id)
}

// required string target_id = 2;
inline bool packet_chat_whisper::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_chat_whisper::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_chat_whisper::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_chat_whisper::clear_target_id() {
  target_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_id();
}
inline const ::std::string& packet_chat_whisper::target_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_whisper.target_id)
  return target_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_whisper::set_target_id(const ::std::string& value) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_whisper.target_id)
}
inline void packet_chat_whisper::set_target_id(const char* value) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_whisper.target_id)
}
inline void packet_chat_whisper::set_target_id(const char* value, size_t size) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_whisper.target_id)
}
inline ::std::string* packet_chat_whisper::mutable_target_id() {
  set_has_target_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_whisper.target_id)
  return target_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_chat_whisper::release_target_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_whisper.target_id)
  clear_has_target_id();
  return target_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_whisper::set_allocated_target_id(::std::string* target_id) {
  if (target_id != NULL) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  target_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_whisper.target_id)
}

// required string chat_message = 3;
inline bool packet_chat_whisper::has_chat_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_chat_whisper::set_has_chat_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_chat_whisper::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_chat_whisper::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_message();
}
inline const ::std::string& packet_chat_whisper::chat_message() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_whisper.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_whisper::set_chat_message(const ::std::string& value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_whisper.chat_message)
}
inline void packet_chat_whisper::set_chat_message(const char* value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_whisper.chat_message)
}
inline void packet_chat_whisper::set_chat_message(const char* value, size_t size) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_whisper.chat_message)
}
inline ::std::string* packet_chat_whisper::mutable_chat_message() {
  set_has_chat_message();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_whisper.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_chat_whisper::release_chat_message() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_whisper.chat_message)
  clear_has_chat_message();
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_whisper::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    set_has_chat_message();
  } else {
    clear_has_chat_message();
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_whisper.chat_message)
}

inline const packet_chat_whisper* packet_chat_whisper::internal_default_instance() {
  return &packet_chat_whisper_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_chat_room

// required string user_id = 1;
inline bool packet_chat_room::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_chat_room::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_chat_room::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_chat_room::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& packet_chat_room::user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_room.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_room::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_room.user_id)
}
inline void packet_chat_room::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_room.user_id)
}
inline void packet_chat_room::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_room.user_id)
}
inline ::std::string* packet_chat_room::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_room.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_chat_room::release_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_room.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_room::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_room.user_id)
}

// required string chat_message = 2;
inline bool packet_chat_room::has_chat_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_chat_room::set_has_chat_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_chat_room::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_chat_room::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_message();
}
inline const ::std::string& packet_chat_room::chat_message() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_room.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_room::set_chat_message(const ::std::string& value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_room.chat_message)
}
inline void packet_chat_room::set_chat_message(const char* value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_room.chat_message)
}
inline void packet_chat_room::set_chat_message(const char* value, size_t size) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_room.chat_message)
}
inline ::std::string* packet_chat_room::mutable_chat_message() {
  set_has_chat_message();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_room.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_chat_room::release_chat_message() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_room.chat_message)
  clear_has_chat_message();
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_room::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    set_has_chat_message();
  } else {
    clear_has_chat_message();
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_room.chat_message)
}

inline const packet_chat_room* packet_chat_room::internal_default_instance() {
  return &packet_chat_room_default_instance_.get();
}
// -------------------------------------------------------------------

// packet_chat_notice

// required string user_id = 1;
inline bool packet_chat_notice::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_chat_notice::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_chat_notice::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_chat_notice::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& packet_chat_notice::user_id() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_notice.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_notice::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_notice.user_id)
}
inline void packet_chat_notice::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_notice.user_id)
}
inline void packet_chat_notice::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_notice.user_id)
}
inline ::std::string* packet_chat_notice::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_notice.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_chat_notice::release_user_id() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_notice.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_notice::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_notice.user_id)
}

// required string chat_message = 2;
inline bool packet_chat_notice::has_chat_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_chat_notice::set_has_chat_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_chat_notice::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_chat_notice::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_message();
}
inline const ::std::string& packet_chat_notice::chat_message() const {
  // @@protoc_insertion_point(field_get:chat_server.packet_chat_notice.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_notice::set_chat_message(const ::std::string& value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_server.packet_chat_notice.chat_message)
}
inline void packet_chat_notice::set_chat_message(const char* value) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_server.packet_chat_notice.chat_message)
}
inline void packet_chat_notice::set_chat_message(const char* value, size_t size) {
  set_has_chat_message();
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_server.packet_chat_notice.chat_message)
}
inline ::std::string* packet_chat_notice::mutable_chat_message() {
  set_has_chat_message();
  // @@protoc_insertion_point(field_mutable:chat_server.packet_chat_notice.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* packet_chat_notice::release_chat_message() {
  // @@protoc_insertion_point(field_release:chat_server.packet_chat_notice.chat_message)
  clear_has_chat_message();
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void packet_chat_notice::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    set_has_chat_message();
  } else {
    clear_has_chat_message();
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:chat_server.packet_chat_notice.chat_message)
}

inline const packet_chat_notice* packet_chat_notice::internal_default_instance() {
  return &packet_chat_notice_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat_server

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chat_server::message_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat_server::message_type>() {
  return ::chat_server::message_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_5fprotobuf_2eproto__INCLUDED
